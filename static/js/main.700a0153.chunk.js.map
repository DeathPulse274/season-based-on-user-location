{"version":3,"sources":["SeasonDisplay.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","latitude","Date","getMonth","_seasonConfig$season","console","log","react_default","a","createElement","className","concat","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","err","message","src_SeasonDisplay","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"uKAGMA,EAAe,CACjBC,OAAS,CACLC,KAAO,uBACPC,SAAW,OAEfC,OAAS,CACLF,KAAO,gBACPC,SAAW,cA6BJE,EAhBO,SAACC,GACnB,IAVeC,EAAMC,EAUfC,GAVSF,EAUUD,EAAMI,UAVVF,GAUmB,IAAIG,MAAOC,YATxC,GAAKJ,EAAQ,EACdD,EAAM,EAAI,SAAW,SAGpBA,EAAM,EAAI,SAAW,UAIJM,EAIFb,EAAaS,GAA/BP,EAJoBW,EAIpBX,KAAOC,EAJaU,EAIbV,SAGf,OADAW,QAAQC,IAAIN,GAERO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKjB,EAAL,WAChBa,EAAAC,EAAAC,cAAA,UAAKhB,GACDc,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKjB,EAAL,aC9BlBkB,6MAGFC,MAAQ,CAAEZ,SAAW,KAAMa,aAAe,uFAGvB,IAAAC,EAAAC,KAEfC,OAAOC,UAAUC,YAAYC,mBACzB,SAACC,GAAD,OAAcN,EAAKO,SAAS,CAAErB,SAAWoB,EAASE,OAAOtB,YACzD,SAACuB,GAAD,OAAST,EAAKO,SAAS,CAAER,aAAcU,EAAIC,6CAM/C,OAAGT,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMZ,SAElCM,EAAAC,EAAAC,cAAA,qBAAaO,KAAKH,MAAMC,eAI5BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMZ,SAElCM,EAAAC,EAAAC,cAACiB,EAAD,CAAezB,SAAYe,KAAKH,MAAMZ,WAIvCM,EAAAC,EAAAC,cAAA,8BA5BGkB,IAAMC,WAgCxBC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.700a0153.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Can avoid Multple Ternary Operator by using season Config\r\nconst seasonConfig = {\r\n    summer : {\r\n        text : \"let's hit the beach!\",\r\n        iconName : 'sun'\r\n    },\r\n    winter : {\r\n        text : 'Burr its Cold',\r\n        iconName : 'snowflake'\r\n    }\r\n}\r\n\r\nconst getSeason = (lat , month) =>{\r\n    if(month > 2 && month < 9){\r\n      return  lat > 0 ? 'summer' : 'winter';\r\n    }\r\n    else{\r\n        return lat > 0 ? 'winter' : 'summer';\r\n    }\r\n}\r\n\r\nconst SeasonDisplay = (props) =>{\r\n    const season = getSeason(props.latitude,new Date().getMonth());\r\n\r\n    //acts as ternari operator which takes input as season and returns appropriate value getSeason () => String shouuld be same [summer,winter]\r\n     const {text , iconName} =seasonConfig[season] //{ text , iconName }\r\n\r\n    console.log(season);\r\n    return(\r\n        <div>\r\n            <i className={`${iconName} icon`} />\r\n        <h1>{text}</h1>\r\n            <i className={`${iconName} icon`} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeasonDisplay;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport SeasonDisplay from './SeasonDisplay';\r\n\r\nclass App extends React.Component{\r\n    \r\n\r\n    state = { latitude : null, errorMessage : '' }\r\n\r\n    //Works same as constructor\r\n    componentDidMount(){\r\n        \r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => this.setState({ latitude : position.coords.latitude}),\r\n            (err) => this.setState({ errorMessage: err.message})\r\n            );\r\n    }\r\n\r\n    //React says we have to define render\r\n    render () {\r\n        if(this.state.errorMessage && !this.state.latitude){\r\n            return (\r\n                <div>Error: {this.state.errorMessage}</div>\r\n            );\r\n        }\r\n\r\n        if(!this.state.errorMessage && this.state.latitude){\r\n            return (\r\n                <SeasonDisplay latitude = {this.state.latitude}/>\r\n            )\r\n        }\r\n\r\n        return <div>Loading!</div>\r\n    }\r\n}\r\n\r\nReactDOM.render(<App/> , document.querySelector('#root'));"],"sourceRoot":""}